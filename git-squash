#!/usr/bin/env sh

usage() {
	git squash --help
}
main(){
	if [[ "$#" -lt 1 ]]; then
		usage; exit 1
	fi

	if [[ "$@" =~ (-h|--help) ]]; then
		usage; 
		exit 0
	fi
	
	while [[ "$#" > 0 ]]; do

		local key=$1; shift		
		local value=$1; shift

		if [[ -z $value ]]; then
			echo "value for $key required, see git squash --help"
			exit 1
			break
		fi

		case $key in
			"-c"|"--commit")				
				local commit_id=$value
				;;
			"-d"|"--diff")
				local branch=$value
				;;
			"-m"|"--message")
				local message=$value
				;;
			*)
				echo "Invalid argument $key, see git squash --help."
				echo
				exit 1
				;;

		esac
	done
	
	if [[ $commit_id && $branch ]]; then
		echo "use only one of either '--diff' or '--commit'"
		exit 1
	fi

	if [[ -z "$message" ]]; then
		echo "Message required, see git squash --help"
		exit 1
	fi

	if [[ $commit_id ]]; then
		squash_by_commit $commit_id $message
	else
		squash_by_diff $branch $message
	fi 
		
}

squash_by_commit() {
	local commit_expression="$1"; shift
	local message=$@

	git reset --soft $commit_expression
	git commit -a -m "$message"

	exit 0
}

squash_by_diff() {
	local source_branch="HEAD"
	local target_branch="$1"; shift
	local message=$@

	local timestamp=$(date +%s)
	
	local source_commits_file=$(echo "${TMPDIR}${timestamp}_${source_branch}.log")
	local target_commits_file=$(echo "${TMPDIR}${timestamp}_${target_branch}.log")

	git rev-list $source_branch > $source_commits_file
	git rev-list $target_branch > $target_commits_file

	local total_of_commits="$(diff $source_commits_file $target_commits_file | grep "<" | sed -n \$=)"

	git reset --soft HEAD~$total_of_commits
	git commit -a -m "$message"

	exit 0
}
main "$@"
